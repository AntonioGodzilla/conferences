@page "/PersonList"
@inject DataSource DataSource
@inject NavigationManager NavigationManager
@implements IDisposable
@using ServerSideSample.Data

<table class="table table-sm">
    <tr>
        <th>Id</th>
        <th>Vorname</th>
        <th>Nachname</th>
        <th>#</th>
    </tr>
    @foreach (var person in DataSource.GetAll(currentPage * pageSize, pageSize))
    {
        <tr style="background: @(person.Id %2 == 0 ? "green" : "blue")"
            class="@(person.Id%2 == 0 ? "gerade" : "ungerade")">
            <td>@person.Id</td>
            <td>@person.Vorname</td>
            <td>@person.Nachname</td>
            <td>
                <button class="btn btn-danger"
                        @onclick="@(() => DataSource.Remove(person.Id))">
                    Löschen
                </button>

                <NavLink Href="@("EditPerson/" + person.Id)">
                    <button class="btn btn-warning">Bearbeiten (NavLink)</button>
                </NavLink>

                <button class="btn btn-warning" @onclick="@(() => NavigationManager.NavigateTo("EditPerson/" + person.Id))">Bearbeiten (NavigationManager)</button>
            </td>
        </tr>
    }
</table>


@if (currentPage > 0)
{
    <button @onclick="@(() => currentPage--)">Previous Page</button>
}
else
{
    <button @onclick="@(() => currentPage--)" disabled>Previous Page</button>
}

@if (currentPage < 9)
{
    <button @onclick="@(() => currentPage++)">Next Page</button>
}

@code
{
    private int currentPage = 0;
    private int pageSize = 10;

    protected override void OnInitialized()
    {
        DataSource.DataHasChanged += OnDataHasChanged;
    }

    private void OnDataHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        DataSource.DataHasChanged -= OnDataHasChanged;
    }
}
