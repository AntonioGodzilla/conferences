@page "/TodoList"

@if (Items != null)
{
    <Expander @bind-IsExpanded="@IsExpanded">
        <ButtonText>
            <img />
            Text
            <img />
        </ButtonText>
        <ChildContent>
            <table>
                @foreach (var item in Items.Skip(CurrentPage * PageSize).Take(PageSize))
                {
                    <TodoItemComponent DeleteRequest="@(() => Items.Remove(item))" Item="item" />
                }
            </table>
            @if (CurrentPage < Items.Count / PageSize - 1)
            {
                <button @onclick="@(() => CurrentPage++)">Next Page</button>
            }
        </ChildContent>
    </Expander>
}
else
{
    <h3>Loading ...</h3>
}


@code {
    public bool IsExpanded { get; set; } = false;

    public List<TodoItem> Items { get; private set; }

    public const int PageSize = 10;
    public int CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        Items = Enumerable.Range(0, 100).Select(x => new TodoItem()
        {
            CreateDate = DateTime.Now,
            Description = "Juhu",
            Id = x
        }).ToList();
    }

    public class TodoItem
    {
        public int Id { get; set; }
        public DateTime CreateDate { get; set; }
        public string Description { get; set; }
    }

}
